{
  "name": "harmony-reflect",
  "version": "1.4.6",
  "description": "ES5 shim for ES6 (ECMAScript 6) Reflect and Proxy objects",
  "main": "reflect.js",
  "keywords": [
    "reflection",
    "proxies",
    "proxy",
    "reflect",
    "harmony",
    "es6"
  ],
  "homepage": "https://github.com/tvcutsem/harmony-reflect",
  "repository": {
    "type": "git",
    "url": "git+https://tvcutsem@github.com/tvcutsem/harmony-reflect.git"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/harmony-reflect.svg)](http://badge.fury.io/js/harmony-reflect) [![Dependencies](https://david-dm.org/tvcutsem/harmony-reflect.png)](https://david-dm.org/tvcutsem/harmony-reflect)\n\nThis is a shim for the ECMAScript 6 [Reflect](http://www.ecma-international.org/ecma-262/6.0/#sec-reflect-object) and [Proxy](http://www.ecma-international.org/ecma-262/6.0/#sec-proxy-objects) objects.\n\nThis library does two things:\n\n  - It defines an ES6-compliant `Reflect` global object that exports the ECMAScript 6 reflection API.\n  - It patches the harmony-era (pre-ES6) `Proxy` object to be up-to-date with the [ES6 spec](http://www.ecma-international.org/ecma-262/6.0/).\n\nRead [Why should I use this library?](https://github.com/tvcutsem/harmony-reflect/wiki)\n\n**Feb 2016 update**: the recently released [V8 v4.9](http://v8project.blogspot.com.au/2016/01/v8-release-49.html) includes native support for ES2015 Proxies and Reflect, making this library obsolete for environments that embed V8 4.9 or newer (like Chrome 49).\n\nInstallation\n============\n\nFor node.js, install via [npm](http://npmjs.org):\n\n    npm install harmony-reflect\n\nThen:\n\n    node --harmony-proxies\n    > var Reflect = require('harmony-reflect');\n\nSee [release notes](https://github.com/tvcutsem/harmony-reflect/blob/master/RELNOTES.md) for changes to the npm releases.\n\nTo use in a browser, just download the single reflect.js file. After loading\n\n    <script src=\"reflect.js\"></script>\n\na global object `Reflect` is defined that contains reflection methods as defined in the [ES6 spec](http://www.ecma-international.org/ecma-262/6.0/#sec-reflect-object).\n\nThis library also updates the \"harmony-era\" `Proxy` object in the V8 engine\n(also used in node.js) to follow the latest [ECMAScript 2015](http://www.ecma-international.org/ecma-262/6.0/) spec.\nTo create such a proxy, call:\n\n    var proxy = new Proxy(target, handler);\n\nSee below for a list of spec incompatibilities and other gotcha's.\n\nAPI Docs\n========\n\nThis module exports an object named `Reflect` and updates the global `Proxy` object (if it exists) to be compatible with the latest ECMAScript 6 spec.\n\nThe ECMAScript 6 Proxy API allows one to intercept various operations on Javascript objects.\n\n  * Overview of all [supported traps](https://github.com/tvcutsem/harmony-reflect/tree/master/doc/traps.md) on proxies\n  * The [Reflect API](https://github.com/tvcutsem/harmony-reflect/tree/master/doc/api.md) \n  * The Proxy [Handler API](https://github.com/tvcutsem/harmony-reflect/tree/master/doc/handler_api.md)\n  \nCompatibility\n=============\n\nThe `Reflect` API, with support for proxies, was tested on:\n\n  * Firefox (>= v4.0)\n  * `node --harmony_proxies` (>= v0.7.8)\n  * `iojs --harmony_proxies` (>= 2.3.0)\n  * `v8 --harmony_proxies` (>= v3.6)\n  * Any recent `js` spidermonkey shell\n\nIf you need only `Reflect` and not an up-to-date `Proxy` object, this\nlibrary should work on any modern ES5 engine (including all browsers).\n\nCompatibility notes:\n\n  * Chrome (>= v19 && <= v37) used to support proxies behind a flag\n    (`chrome://flags/#enable-javascript-harmony`) but Chrome v38  [removed](https://code.google.com/p/v8/issues/detail?id=1543#c44) the `Proxy` constructor. As a result, this library cannot patch the harmony-era `Proxy` object on Chrome v38 or above. If you're working with Chromium directly, it's still possible to enable proxies using `chromium-browser --js-flags=\"--harmony_proxies\"`.\n  * In older versions of V8, the `Proxy` constructor was enabled by\n    default when starting V8 with `--harmony`. For recent versions of V8,\n    `Proxy` must be explicitly enabled with `--harmony_proxies`.\n\nDependencies\n============\n\n  *  ECMAScript 5/strict\n  *  To emulate direct proxies:\n    *  old Harmony [Proxies](http://wiki.ecmascript.org/doku.php?id=harmony:proxies)\n    *  Harmony [WeakMaps](http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps)\n\nAfter loading `reflect.js` into your page or other JS environment, be aware that the following globals are patched to be able to recognize emulated direct proxies:\n\n    Object.getOwnPropertyDescriptor\n    Object.defineProperty\n    Object.defineProperties\n    Object.getOwnPropertyNames\n    Object.getOwnPropertySymbols\n    Object.keys\n    Object.{get,set}PrototypeOf\n    Object.assign\n    Object.{freeze,seal,preventExtensions}\n    Object.{isFrozen,isSealed,isExtensible}\n    Object.prototype.valueOf\n    Object.prototype.isPrototypeOf\n    Object.prototype.toString\n    Object.prototype.hasOwnProperty\n    Function.prototype.toString\n    Date.prototype.toString\n    Array.isArray\n    Array.prototype.concat\n    Proxy\n    Reflect\n\n:warning: In node.js, when you `require('harmony-reflect')`, only the current\nmodule's globals are patched. If you pass an emulated direct proxy to an external module, and that module uses the unpatched globals, the module may not interact with the proxy according to the latest ES6 Proxy API, instead falling\nback on the old pre-ES6 Proxy API. This can cause bugs, e.g. the built-in `Array.isArray` will return `false` when passed a proxy-for-array, while the\npatched `Array.isArray` will return true. I know of no good fix to reliably patch the globals for all node modules. If you do, let me know.\n\nExamples\n========\n\nThe [examples](https://github.com/tvcutsem/harmony-reflect/tree/master/examples) directory contains a number of examples demonstrating the use of proxies:\n\n  * membranes: wrappers that transitively isolate two object-graphs.\n  * observer: a self-hosted implementation of the ES7 `Object.observe` notification mechanism.\n  * profiler: a simple profiler to collect usage statistics of an object.\n\nOther example uses of proxies (not done by me, but using this library):\n\n  * supporting [negative array indices](https://github.com/sindresorhus/negative-array) a la Python\n  * [tpyo](https://github.com/mathiasbynens/tpyo): using proxies to correct typo's in JS property names\n  * [persistent objects](http://tagtree.tv/es6-proxies): shows how one might go about using proxies to save updates to objects in a database incrementally\n  * [defaultdict](https://github.com/greenify/defaultdict2): default values for new keys in objects (as known from Python)\n\nFor more examples of proxies, and a good overview of their design rationale, I recommend reading [Axel Rauschmayer's blog post on proxies](http://www.2ality.com/2014/12/es6-proxies.html).\n\nProxy Handler API\n=================\n\nThe sister project [proxy-handlers](https://github.com/tvcutsem/proxy-handlers)\ndefines a number of predefined Proxy handlers as \"abstract classes\" that your \ncode can \"subclass\" The goal is to minimize the number of traps that your proxy\nhandlers must implement.\n\nSpec Incompatibilities and other gotcha's\n=========================================\n\nThis library differs from the [ECMAScript 2015 spec](http://www.ecma-international.org/ecma-262/6.0/) as follows:\n\n  * In ES6, `Proxy` is a constructor function that _requires_ the use\n    of `new`. That is, you must write `new Proxy(target, handler)`. This library\n    exports `Proxy` as an ordinary function which may be called with or without using the `new` operator.\n    \n  * In ES6, `Function.prototype.toString` and `Date.prototype.toString` do not\n    operate transparently on Proxies. This shim patches those functions so that\n    stringifying a Proxy-for-a-function or a Proxy-for-a-date \"unwraps\" the\n    proxy and instead stringifies the target of the Proxy. This behavior may\n    change in the future to be more spec-compatible.\n    \n  * This library does not shim [Symbol objects](http://www.ecma-international.org/ecma-262/6.0/#sec-symbol-objects).\n    On modern V8 or io.js which supports Symbol objects natively, due to a bug in V8, Symbols and Proxies\n    don't play well together. [Read more](https://github.com/tvcutsem/harmony-reflect/issues/57).\n  \n  * Proxies-for-arrays are serialized as JSON objects rather than as JSON arrays. That is, `JSON.stringify(new Proxy([], {}))` returns \"{}\" rather than \"[]\". [Read more]( https://github.com/tvcutsem/harmony-reflect/issues/13#issuecomment-17249465).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tvcutsem/harmony-reflect/issues"
  },
  "_id": "harmony-reflect@1.4.6",
  "_from": "harmony-reflect@>=1.1.1 <2.0.0"
}
